# -*- coding: utf-8 -*-
############################################################
#
# Autogenerated by the KBase type compiler -
# any changes made here will be overwritten
#
############################################################

from __future__ import print_function
# the following is a hack to get the baseclient to import whether we're in a
# package or not. This makes pep8 unhappy hence the annotations.
try:
    # baseclient and this client are in a package
    from .baseclient import BaseClient as _BaseClient  # @UnusedImport
except ImportError:
    # no they aren't
    from baseclient import BaseClient as _BaseClient  # @Reimport


class ServiceWizard(object):

    def __init__(
            self, url=None, timeout=30 * 60, user_id=None,
            password=None, token=None, ignore_authrc=False,
            trust_all_ssl_certificates=False,
            auth_svc='https://ci.kbase.us/services/auth/api/legacy/KBase/Sessions/Login'):
        if url is None:
            raise ValueError('A url is required')
        self._service_ver = None
        self._client = _BaseClient(
            url, timeout=timeout, user_id=user_id, password=password,
            token=token, ignore_authrc=ignore_authrc,
            trust_all_ssl_certificates=trust_all_ssl_certificates,
            auth_svc=auth_svc)

    def version(self, context=None):
        """
        Get the version of the deployed service wizard endpoint.
        :returns: instance of String
        """
        return self._client.call_method('ServiceWizard.version',
                                        [], self._service_ver, context)

    def start(self, service, context=None):
        """
        Try to start the specified service; this will generate an error if the
        specified service cannot be started.  If the startup did not give any
        errors, then the status of the running service is provided.
        :param service: instance of type "Service" (module_name - the name of
           the service module, case-insensitive version     - specify the
           service version, which can be either: (1) full git commit hash of
           the module version (2) semantic version or semantic version
           specification Note: semantic version lookup will only work for
           released versions of the module. (3) release tag, which is one of:
           dev | beta | release This information is always fetched from the
           Catalog, so for more details on specifying the version, see the
           Catalog documentation for the get_module_version method.) ->
           structure: parameter "module_name" of String, parameter "version"
           of String
        :returns: instance of type "ServiceStatus" (module_name     - name of
           the service module version         - semantic version number of
           the service module git_commit_hash - git commit hash of the
           service module release_tags    - list of release tags currently
           for this service module (dev/beta/release) url             - the
           url of the service up              - 1 if the service is up, 0
           otherwise status          - status of the service as reported by
           rancher health          - health of the service as reported by
           Rancher TODO: add something to return: string
           last_request_timestamp;) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "up" of
           type "boolean", parameter "status" of String, parameter "health"
           of String
        """
        return self._client.call_method('ServiceWizard.start',
                                        [service], self._service_ver, context)

    def stop(self, service, context=None):
        """
        Try to stop the specified service; this will generate an error if the
        specified service cannot be stopped.  If the stop did not give any
        errors, then the status of the stopped service is provided.
        :param service: instance of type "Service" (module_name - the name of
           the service module, case-insensitive version     - specify the
           service version, which can be either: (1) full git commit hash of
           the module version (2) semantic version or semantic version
           specification Note: semantic version lookup will only work for
           released versions of the module. (3) release tag, which is one of:
           dev | beta | release This information is always fetched from the
           Catalog, so for more details on specifying the version, see the
           Catalog documentation for the get_module_version method.) ->
           structure: parameter "module_name" of String, parameter "version"
           of String
        :returns: instance of type "ServiceStatus" (module_name     - name of
           the service module version         - semantic version number of
           the service module git_commit_hash - git commit hash of the
           service module release_tags    - list of release tags currently
           for this service module (dev/beta/release) url             - the
           url of the service up              - 1 if the service is up, 0
           otherwise status          - status of the service as reported by
           rancher health          - health of the service as reported by
           Rancher TODO: add something to return: string
           last_request_timestamp;) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "up" of
           type "boolean", parameter "status" of String, parameter "health"
           of String
        """
        return self._client.call_method('ServiceWizard.stop',
                                        [service], self._service_ver, context)

    def list_service_status(self, params, context=None):
        """
        :param params: instance of type "ListServiceStatusParams" (not yet
           implemented funcdef pause(Service service) returns (ServiceStatus
           status);) -> structure: parameter "is_up" of type "boolean",
           parameter "module_names" of list of String
        :returns: instance of list of type "ServiceStatus" (module_name     -
           name of the service module version         - semantic version
           number of the service module git_commit_hash - git commit hash of
           the service module release_tags    - list of release tags
           currently for this service module (dev/beta/release) url          
           - the url of the service up              - 1 if the service is up,
           0 otherwise status          - status of the service as reported by
           rancher health          - health of the service as reported by
           Rancher TODO: add something to return: string
           last_request_timestamp;) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "up" of
           type "boolean", parameter "status" of String, parameter "health"
           of String
        """
        return self._client.call_method('ServiceWizard.list_service_status',
                                        [params], self._service_ver, context)

    def get_service_status(self, service, context=None):
        """
        For a given service, check on the status.  If the service is down or
        not running, this function will attempt to start or restart the
        service once, then return the status.
        This function will throw an error if the specified service cannot be
        found or encountered errors on startup.
        :param service: instance of type "Service" (module_name - the name of
           the service module, case-insensitive version     - specify the
           service version, which can be either: (1) full git commit hash of
           the module version (2) semantic version or semantic version
           specification Note: semantic version lookup will only work for
           released versions of the module. (3) release tag, which is one of:
           dev | beta | release This information is always fetched from the
           Catalog, so for more details on specifying the version, see the
           Catalog documentation for the get_module_version method.) ->
           structure: parameter "module_name" of String, parameter "version"
           of String
        :returns: instance of type "ServiceStatus" (module_name     - name of
           the service module version         - semantic version number of
           the service module git_commit_hash - git commit hash of the
           service module release_tags    - list of release tags currently
           for this service module (dev/beta/release) url             - the
           url of the service up              - 1 if the service is up, 0
           otherwise status          - status of the service as reported by
           rancher health          - health of the service as reported by
           Rancher TODO: add something to return: string
           last_request_timestamp;) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "up" of
           type "boolean", parameter "status" of String, parameter "health"
           of String
        """
        return self._client.call_method('ServiceWizard.get_service_status',
                                        [service], self._service_ver, context)

    def get_service_status_without_restart(self, service, context=None):
        """
        :param service: instance of type "Service" (module_name - the name of
           the service module, case-insensitive version     - specify the
           service version, which can be either: (1) full git commit hash of
           the module version (2) semantic version or semantic version
           specification Note: semantic version lookup will only work for
           released versions of the module. (3) release tag, which is one of:
           dev | beta | release This information is always fetched from the
           Catalog, so for more details on specifying the version, see the
           Catalog documentation for the get_module_version method.) ->
           structure: parameter "module_name" of String, parameter "version"
           of String
        :returns: instance of type "ServiceStatus" (module_name     - name of
           the service module version         - semantic version number of
           the service module git_commit_hash - git commit hash of the
           service module release_tags    - list of release tags currently
           for this service module (dev/beta/release) url             - the
           url of the service up              - 1 if the service is up, 0
           otherwise status          - status of the service as reported by
           rancher health          - health of the service as reported by
           Rancher TODO: add something to return: string
           last_request_timestamp;) -> structure: parameter "module_name" of
           String, parameter "version" of String, parameter "git_commit_hash"
           of String, parameter "release_tags" of list of String, parameter
           "hash" of String, parameter "url" of String, parameter "up" of
           type "boolean", parameter "status" of String, parameter "health"
           of String
        """
        return self._client.call_method('ServiceWizard.get_service_status_without_restart',
                                        [service], self._service_ver, context)

    def get_service_log(self, params, context=None):
        """
        :param params: instance of type "GetServiceLogParams" (optional
           instance_id to get logs for a specific instance.  Otherwise logs
           from all instances are returned, TODO: add line number
           constraints.) -> structure: parameter "service" of type "Service"
           (module_name - the name of the service module, case-insensitive
           version     - specify the service version, which can be either:
           (1) full git commit hash of the module version (2) semantic
           version or semantic version specification Note: semantic version
           lookup will only work for released versions of the module. (3)
           release tag, which is one of: dev | beta | release This
           information is always fetched from the Catalog, so for more
           details on specifying the version, see the Catalog documentation
           for the get_module_version method.) -> structure: parameter
           "module_name" of String, parameter "version" of String, parameter
           "instance_id" of String
        :returns: instance of list of type "ServiceLog" -> structure:
           parameter "instance_id" of String, parameter "log" of list of
           String
        """
        return self._client.call_method('ServiceWizard.get_service_log',
                                        [params], self._service_ver, context)

    def get_service_log_web_socket(self, params, context=None):
        """
        returns connection info for a websocket connection to get realtime service logs
        :param params: instance of type "GetServiceLogParams" (optional
           instance_id to get logs for a specific instance.  Otherwise logs
           from all instances are returned, TODO: add line number
           constraints.) -> structure: parameter "service" of type "Service"
           (module_name - the name of the service module, case-insensitive
           version     - specify the service version, which can be either:
           (1) full git commit hash of the module version (2) semantic
           version or semantic version specification Note: semantic version
           lookup will only work for released versions of the module. (3)
           release tag, which is one of: dev | beta | release This
           information is always fetched from the Catalog, so for more
           details on specifying the version, see the Catalog documentation
           for the get_module_version method.) -> structure: parameter
           "module_name" of String, parameter "version" of String, parameter
           "instance_id" of String
        :returns: instance of list of type "ServiceLogWebSocket" ->
           structure: parameter "instance_id" of String, parameter
           "socket_url" of String
        """
        return self._client.call_method('ServiceWizard.get_service_log_web_socket',
                                        [params], self._service_ver, context)

    def status(self, context=None):
        return self._client.call_method('ServiceWizard.status',
                                        [], self._service_ver, context)
